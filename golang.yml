- name: Get latest go release
  uri:
    url: https://golang.org/dl/?mode=json
    return_content: true
  register: go_remote_info

- name: Get local go version
  shell: "/home/{{ user }}/.local/bin/go/bin/go version | awk '{print $3}'"
  register: go_local_info

- name: set go metadata
  set_fact:
    go_filename: "{{ go_remote_info.json | json_query(\"[].files[?os=='linux'][] | [?arch=='amd64'] | [0].filename\") }}"
    go_download_url: "https://golang.org/dl/{{ go_remote_info.json | json_query(\"[].files[?os=='linux'][] | [?arch=='amd64'] | [0].filename\") }}"
    go_remote_version: "{{ go_remote_info.json | json_query(\"[].files[?os=='linux'][] | [?arch=='amd64'] | [0].version\") }}"
    go_local_version: "{{ go_local_info.stdout }}"


- name: "Delete old go version {{ go_local_version }}"
  file:
    path: "/home/{{ user }}/.local/bin/go"
    state: absent
  when: go_local_version != go_remote_version

- name: "Unarchive Go {{ go_remote_version }} local: {{ go_local_version }}"
  unarchive:
    src: "{{ go_download_url }}"
    dest: "/home/{{ user }}/.local/bin"
    remote_src: yes
    owner: "{{ user }}"
    group: "{{ user }}"
  when: go_local_version != go_remote_version
